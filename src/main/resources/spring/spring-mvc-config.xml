<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/jpa
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd">

	<mvc:annotation-driven />

	<context:component-scan base-package="net.rabiang.web" />

	<!-- 
	- The ContentNegotiatingViewResolver delegates to the InternalResourceViewResolver 
	- and BeanNameViewResolver, - and uses the requested media type (determined 
    - by the path extension) to pick a matching view.
    - When the media type is 'text/html', it will delegate to the InternalResourceViewResolver's JstlView, 
	- otherwise to the BeanNameViewResolver. -->
	<mvc:view-resolvers>
		<mvc:content-negotiation use-not-acceptable="true">
			<mvc:default-views>
				<bean class="org.springframework.web.servlet.view.JstlView">
					<property name="url" value="" />
				</bean>
			</mvc:default-views>
		</mvc:content-negotiation>

		<!-- Registering BeanNameViewResolver and InternalViewResolver -->
		<mvc:bean-name />
		<mvc:jsp prefix="/WEB-INF/jsp/" suffix=".jsp" />
	</mvc:view-resolvers>

	<!--
	- All resources inside folder src/main/webapp/resources are mapped 
	- so they can be refered to inside JSP files. -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/vendors/**" location="/vendors/" />

	<!-- DBCP2 pool for database connection -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.h2.Driver"/>
		<property name="url" value="jdbc:h2:mem:rabiang"/>
		<property name="username" value="sa"/>
		<property name="password" value=""/>
	</bean>
	
	<!-- JPA EntityManagerFactory -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="packagesToScan" value="net.rabiang.models"/>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<!-- 
				- Properties (database, showSql, databasePlatform, generateDdl)
				- are not configured here because we have "jpaProperties" as shown below. -->
			</bean>				
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<prop key="hibernate.id.new_generator_mappings">true</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop>				
			</props>
		</property>
	</bean>
	
	<jpa:repositories base-package="net.rabiang.repository"/>
	
	<!-- enables scanning for @Transactional annotations -->
    <tx:annotation-driven/>

	<!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>	   		   
	</bean>

	<!--
	- Post-processor to perform exception translation on @Repository classes (from native
	- exceptions such as JPA PersistenceExceptions to Spring's DataAccessException hierarchy).
	-->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
</beans>
